/***  HomeMade by shoe[box]**  Redistribution and use in source and binary forms, with or without *  modification, are permitted provided that the following conditions are*  met:** Redistributions of source code must retain the above copyright notice, *   this list of conditions and the following disclaimer.*  * Redistributions in binary form must reproduce the above copyright*    notice, this list of conditions and the following disclaimer in the *    documentation and/or other materials provided with the distribution.*  * Neither the name of shoe[box] nor the names of its * contributors may be used to endorse or promote products derived from * this software without specific prior written permission.* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS* IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,* THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR* PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.core; 	/**	* org.shoebox.core.BoxObject	* @author shoebox	*/	class BoxObject {				// -------o constructor									// -------o constructor					public function new() {							}		// -------o public						/**			* 			*			* @param 			* @return			*/			public static function accessorInit( target : Dynamic , o : Dynamic) : Void {				var a : Array<String> = Reflect.fields( o );				for ( s in a) {					Reflect.setField( target , s , Reflect.field( o , s ) );				}							}			/**			* 			* 			* @public			* @return	void			*/			static public function purge( o : Dynamic = null ) : Void {				if( o == null )					return;				var typ = Type.getClass( o );				var a = Type.getInstanceFields( typ );				for( f in a ){					try{						if( Reflect.isObject( Reflect.field( o , f ) ) )							Reflect.setField( o , f , null );					}catch( e : flash.errors.Error ){											}				}					}					// -------o protected				// -------o misc	}