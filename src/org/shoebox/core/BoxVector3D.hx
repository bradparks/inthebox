/***  HomeMade by shoe[box]**  Redistribution and use in source and binary forms, with or without *  modification, are permitted provided that the following conditions are*  met:** Redistributions of source code must retain the above copyright notice, *   this list of conditions and the following disclaimer.*  * Redistributions in binary form must reproduce the above copyright*    notice, this list of conditions and the following disclaimer in the *    documentation and/or other materials provided with the distribution.*  * Neither the name of shoe[box] nor the names of its * contributors may be used to endorse or promote products derived from * this software without specific prior written permission.* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS* IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,* THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR* PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.core;		import flash.geom.Vector3D;	import org.shoebox.libs.nevermind.behaviors.ABehavior;	/**	* org.shoebox.core.BoxVector3D	* @author shoebox	*/	class BoxVector3D extends Vector3D{				public var angle	( getAngle 	, setAngle ) 	: Float;		//public var length	( null	 	, setLength ) 	: Float;				// -------o constructor					/**			* Constructor of the BoxVector3D class			*			* @public			* @return	void			*/			public function new( x : Float = 0 , y : Float = 0 , z : Float = 0 , w : Float = 0 ) : Void {				super( x , y , z , w );			}		// -------o public						/**			* truncate function			* @public			* @param 			* @return			*/			public function truncate( n : Float ) : Void {								if( n == length )					return;								setLength( Math.min( n , length ) );							}						/**			* divide function			* @public			* @param 			* @return			*/			public function divide( n : Float ) : Void {				x /= n;				y /= n;				z /= n; 			}						/**			* reset function			* @public			* @param 			* @return			*/			public function reset() : Void {				x = y = z = 0;			}						/**			* clone function			* @public			* @param 			* @return			*/			public function copy() : BoxVector3D {				return new BoxVector3D( x , y , z , w );			}						public function normalizeVector( ) : BoxVector3D {								if ( length == 0 ) {					x = 1;					return this;				}								divide( length );				return this;			}					// -------o protected						/**			* get angle function			* @private			* @param 			* @return			*/			public function getAngle() : Float {				return Math.atan2( y , x );			}						/**			* set angle function			* @private			* @param 			* @return			*/			public function setAngle( n : Float ) : Float {				x = Math.cos( n ) * length;				y = Math.sin( n ) * length;								return n;			}						/**			* set length function			* @private			* @param 			* @return			*/			public function setLength( n : Float ) : Float {				x = Math.cos( angle ) * n;				y = Math.sin( angle ) * n;				return n;			}					// -------o misc	}